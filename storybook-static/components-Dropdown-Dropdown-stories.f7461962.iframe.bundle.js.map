{"version":3,"file":"components-Dropdown-Dropdown-stories.f7461962.iframe.bundle.js","mappings":";;;;;;;AAgBA;AAKA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;AAMA","sources":["webpack://valdez_hanz_ui_garden/./src/components/Dropdown/Dropdown.tsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { DropdownProps } from './Dropdown.types';\n\ninterface StyledSelectProps {\n  disabled?: boolean;\n  backgroundColor?: string;\n}\n\nconst StyledSelect = styled.select<StyledSelectProps>`\n  width: 100%;\n  padding: 12px 16px;\n  border: 1px solid #ced4da;\n  border-radius: 4px;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  background-color: ${(props) => {\n    if (props.disabled) return '#f8f9fa';\n    if (props.backgroundColor) return props.backgroundColor;\n    return '#ffffff';\n  }};\n  color: ${(props) => (props.disabled ? '#6c757d' : '#495057')};\n  cursor: ${(props) => (props.disabled ? 'not-allowed' : 'pointer')};\n  appearance: none;\n  background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e\");\n  background-position: right 12px center;\n  background-repeat: no-repeat;\n  background-size: 16px;\n  padding-right: 40px;\n  transition: all 0.2s ease-in-out;\n\n  &:focus {\n    outline: none;\n    border-color: #007bff;\n    box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);\n  }\n\n  &:hover:not(:disabled) {\n    border-color: #adb5bd;\n  }\n\n  @media (max-width: 768px) {\n    padding: 10px 14px;\n    font-size: 13px;\n    padding-right: 36px;\n  }\n`;\n\nconst StyledOption = styled.option`\n  background-color: #ffffff;\n  color: #495057;\n  padding: 8px 12px;\n`;\n\nexport const Dropdown: React.FC<DropdownProps> = ({\n  options,\n  placeholder = 'Select an option',\n  value,\n  disabled = false,\n  backgroundColor,\n  className,\n  onChange,\n  ...props\n}) => {\n  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    if (onChange) {\n      onChange(event.target.value);\n    }\n  };\n\n  return (\n    <StyledSelect\n      value={value || ''}\n      disabled={disabled}\n      backgroundColor={backgroundColor}\n      className={className}\n      onChange={handleChange}\n    >\n      <StyledOption value=\"\" disabled>\n        {placeholder}\n      </StyledOption>\n      {options.map((option) => (\n        <StyledOption key={option.value} value={option.value}>\n          {option.label}\n        </StyledOption>\n      ))}\n    </StyledSelect>\n  );\n};\n"],"names":[],"sourceRoot":""}